import conf
import telebot
from telebot import types
from captcha.image import ImageCaptcha
from random import choice
import os
import sqlite3

id_ = ''
key = ''
tglink = ''
botlink = ''
num_cap = 4
db = sqlite3.connect('table.db')
cur = db.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users (idt TEXT, key TEXT, tglink TEXT)""")

telegram_api = conf.telegram
bot = telebot.TeleBot(telegram_api)


def captcha_gen():
    a_captcha = list("abcdefghijklmnopqrstuvwxyz?!0123456789")
    pattern = []

    for i in range(7):
        pattern.append(choice(a_captcha))

    imagecaptcha = ImageCaptcha(width=300, height=200)

    captcha_filename = 'captcha.png'

    # Check if the file exists and delete it
    if os.path.exists(captcha_filename):
        os.remove(captcha_filename)

    imagecaptcha.write(pattern, captcha_filename)
    string = ''.join(pattern)

    with open(captcha_filename, 'rb') as file:
        captcha_content = file.read()

    os.remove(captcha_filename)

    return captcha_content, string


def key_gen():
    a = list("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&?!-+0123456789")
    gen_key = []
    for i in range(20):
        gen_key.append(choice(a))
    string = ''.join(gen_key)
    return string


def generate_back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–æ–±–æ—Ç–∞ü§ñ\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é!üìã')

def back(message):
    bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥!‚Ü©Ô∏è\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é!üìã')


@bot.message_handler(commands=['new_key'])
def new_key(message):
    global id_
    id_ = message.from_user.id
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ªüì¢', reply_markup=generate_back_button())
    bot.register_next_step_handler(message, check_tg)


def check_tg(message):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        back(message)
        return

    tglink = message.text
    if 'https://t.me/' in tglink:
        db = sqlite3.connect('table.db')
        cur = db.cursor()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        string = key_gen()
        while True:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("SELECT COUNT(*) FROM users WHERE key = ?", (string,))
            result = cur.fetchone()[0]
            if result == 0:
                break
            else:
                string = key_gen()
        
        cur.execute("SELECT tglink FROM users WHERE tglink = ? AND idt = ?", (tglink, message.from_user.id,))
        tg_check = cur.fetchall()
        if tg_check:
            cur.execute("UPDATE users SET key = ? WHERE tglink = ? AND idt = ?", (string, tglink, message.from_user.id,))
            db.commit()
            db.close()
            bot.send_message(message.chat.id, f'–í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á: `{string}`üîëüîÅüóù', parse_mode="Markdown")
        else:
            cur.execute("INSERT INTO users(idt, key, tglink) VALUES(?, ?, ?)", (message.from_user.id, string, tglink,))
            db.commit()
            db.close()
            bot.send_message(message.chat.id, f'–í–∞—à –∫–ª—é—á: `{string}`üîë', parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞‚ùå')


@bot.message_handler(commands=['key'])
def key(message):
    global num_cap
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—áüîë', reply_markup=generate_back_button())
    num_cap = 4
    bot.register_next_step_handler(message, check_key)


def check_key(message):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        back(message)
        return

    global tglink, param
    key = message.text
    db = sqlite3.connect('table.db')
    cur = db.cursor()
    cur.execute("SELECT tglink FROM users WHERE key = ?", (key,))
    tglinkdb = cur.fetchone()
    if tglinkdb:
        tglink = tglinkdb[0]
        captcha_im, param = captcha_gen()
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('üîÑ', callback_data='regenerate')
        btn2 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
        markup.add(btn1, btn2)
        bot.send_photo(chat_id=message.chat.id, photo=captcha_im, caption='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏üñº', reply_markup=markup)
        bot.register_next_step_handler(message, captcha_check)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çü§∑‚Äç‚ôÇÔ∏è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ /keyüîí')
    db.close()


@bot.callback_query_handler(func=lambda callback: True)
def regen(callback):
    global param, num_cap
    num_cap = 4
    if callback.data == 'regenerate':
        captcha_im, param = captcha_gen()
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('üîÑ', callback_data='regenerate')
        btn2 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
        markup.add(btn1, btn2)
        bot.send_photo(chat_id=callback.message.chat.id, photo=captcha_im, caption='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏üñº', reply_markup=markup)
    elif callback.data == 'back':
        back(callback.message)
        bot.clear_step_handler_by_chat_id(callback.message.chat.id)
        return

def captcha_check(message):
    global param, tglink, num_cap
    num_cap -= 1
    if message.text == param:
        bot.send_message(message.chat.id, f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {tglink} üîì')
        tglink = ''
    else:
        if num_cap > 0:
            if num_cap > 1:
                string = '–ø–æ–ø—ã—Ç–∫–∏‚ùóÔ∏è'
            else:
                string = '–ø–æ–ø—ã—Ç–∫–∞‚ÄºÔ∏è'
            bot.send_message(message.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚ùå –£ –≤–∞—Å –µ—â—ë –µ—Å—Ç—å {num_cap} {string}')
            bot.register_next_step_handler(message, captcha_check)
        else:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏üòï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ /keyüîí')
            num_cap = 4


@bot.message_handler(commands=['my_keys'])
def my_keys(message):
    user_id = message.from_user.id

    db = sqlite3.connect('table.db')
    cur = db.cursor()

    cur.execute("SELECT tglink, key FROM users WHERE idt = ?", (user_id,))
    results = cur.fetchall()

    if results:
        response = "–í–∞—à–∏ –∫–ª—é—á–∏üîê:\n"
        for tglink, key in results:
            response += f"{tglink} - `{key}`\n"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")

    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–πüîê")

    db.close()


@bot.message_handler(commands=['delete_key'])
def delete_key(message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∏–ª–∏ –∫–ª—é—á –æ—Ç –Ω–µ–≥–æüóë',reply_markup=generate_back_button())
    bot.register_next_step_handler(message, delete)


def delete(message):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        back(message)
        return

    mess = message.text
    db = sqlite3.connect('table.db')
    cur = db.cursor()
    if 'https://t.me/' in mess:
        cur.execute("SELECT tglink FROM users WHERE tglink = ? AND idt = ?", (mess, message.from_user.id,))
        res = cur.fetchall()
        if res:
            cur.execute("DELETE FROM users WHERE tglink = ? AND idt = ?", (mess, message.from_user.id,))
            db.commit()
            bot.send_message(message.chat.id, '–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω‚úÖ')
        else:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–∏ü§∑‚Äç‚ôÇÔ∏è')
    else:
        cur.execute("SELECT tglink FROM users WHERE key = ? AND idt = ?", (mess, message.from_user.id,))
        res = cur.fetchall()
        if res:
            cur.execute("DELETE FROM users WHERE key = ? AND idt = ?", (mess, message.from_user.id,))
            db.commit()
            bot.send_message(message.chat.id, '–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω‚úÖ')
        else:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ü§∑‚Äç‚ôÇÔ∏è')
    db.close()


def generate_back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ü§ñ\n1. /new_key - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞, –ø–æ –Ω–µ–º—É –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏. <b>–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª—é—á–∏ –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–≥–∫, –Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ</b>\n2. /key - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª—é—á, –ø–æ–ª—É—á–∞–µ—Ç –∫–∞–ø—Ç—á—É, –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ—ë –∏ –≤—É–∞–ª—è! –ë–æ—Ç –≤—ã–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∫–ª—é—á.\n3. /my_keys - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏ —Å—Å—ã–ª–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–∏ –∫–ª—é—á–∏. <b>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª—é—á–∏, —á—Ç–æ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–∞–º–∏.</b>\n4./delete_key - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ/–∫–ª—é—á—É –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º—É –∫ –Ω–µ–π. <b>–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à –∫–ª—é—á. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –∫–ª—é—á –ø–æ —Å—Å—ã–ª–∫–µ/–∫–ª—é—á—É</b>\n\n–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –≤–∞–º –ø–æ–º–æ–≥–ª–æüòÑ', parse_mode='html')



dibil_num = 0


@bot.message_handler()
def defender(message):
    global dibil_num
    if dibil_num < 3:
        bot.send_message(message.chat.id, '–°–∞–º —Ç–∞–∫–æ–πüó£fsdfssdas')
        dibil_num += 1
    else:
        bot.send_message(message.chat.id, '–¢–∞–º –≤–Ω–∏–∑—É –º–µ–Ω—é, –∏–¥–∏–æ—Ç')
        dibil_num = 0


bot.polling()
